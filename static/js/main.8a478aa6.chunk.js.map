{"version":3,"sources":["KeyContext.tsx","context.ts","App.tsx","Voting.tsx","serviceWorker.ts","index.tsx"],"names":["withKeyContext","contractAddress","Component","useState","provided","key","passphrase","keyContext","setKeyContext","rpc","Tezos","setProvider","useContract","state","setState","getContract","a","script","storage","useEffect","interval","setInterval","clearInterval","importKey","contract","at","injectMemo","content","methods","main","send","response","confirmation","createContext","context","onImportKeys","then","catch","alert","className","type","value","placeholder","onChange","ev","currentTarget","startsWith","onClick","Memo","inTransaction","setInTransaction","onMemoInject","ctx","injected","message","string","disabled","Votee","name","count","onVote","onRemoveCandidate","args","map","item","isElectionClosed","prim","vote","voted","remove_candidate","onCloseElection","close_election","onAddCandidate","add_candidate","int","window","confirm","Boolean","location","hostname","match","ReactDOM","render","pathname","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a478aa6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { createContext } from './context'\n\nexport type ComponentProps = ReturnType<typeof createContext>\n\nexport const withKeyContext = (\n  contractAddress: string,\n  Component: React.FC<ComponentProps>\n) => () => {\n  const [keyContext, setKeyContext] = useState({\n    provided: false,\n    key: '',\n    passphrase: ''\n  })\n\n  const [context, setContext] = useState(createContext({\n    rpc: 'http://192.168.0.171:8732',\n    contractAddress: contractAddress\n  }))\n\n  const { importKey } = context\n\n  // functions\n  const onImportKeys = async (key: string, passphrase: string) => {\n    importKey(key, passphrase)\n      .then(() => setKeyContext({ ...keyContext, provided: true }))\n      .catch(() => {\n        alert('Wrong secret key or passphrase provided!')\n        setKeyContext({\n          provided: false,\n          key: '',\n          passphrase: ''\n        })\n      })\n  }\n\n  // key is not provided, prompt input\n  if (!keyContext.provided) {\n    return (\n      <form className=\"context\">\n        <h1>Sign In</h1>\n        <div>\n          <input\n            type=\"password\"\n            value={keyContext.key}\n            placeholder=\"Enter your private key\"\n            onChange={ev => setKeyContext({ ...keyContext, key: ev.currentTarget.value })}\n          />\n          {keyContext.key.startsWith('edesk') && (\n            <input\n              type=\"password\"\n              value={keyContext.passphrase}\n              placeholder=\"Enter passphrase\"\n              onChange={ev => setKeyContext({ ...keyContext, passphrase: ev.currentTarget.value })}\n            />\n          )}\n        </div>\n\n        <footer>\n          <button onClick={async () => onImportKeys(\n            keyContext.key,\n            keyContext.passphrase\n          )}>\n            Sign In\n          </button>\n        </footer>\n      </form>\n    )\n  }\n\n  return <Component {...context}/>\n}\n","import { useEffect, useState } from 'react'\nimport { Tezos } from '@taquito/taquito'\n\ninterface Context {\n  rpc: string,\n  contractAddress: string\n}\n\nexport const createContext = ({\n  rpc,\n  contractAddress\n}: Context) => {\n  // set rpc provider\n  Tezos.setProvider({ rpc })\n  \n  return {\n    useContract() {\n      const [state, setState] = useState()\n      const getContract = async () => {\n        const { script } = await Tezos.rpc.getContract(contractAddress)\n        setState(script.storage)\n      }\n\n      // refresh contract state every second\n      useEffect(() => {\n        const interval = setInterval(getContract, 1000)\n        return () => clearInterval(interval)\n      }, [contractAddress])\n\n      return state\n    },\n    \n    async importKey(key: string, passphrase?: string) {\n      return Tezos.importKey(key, passphrase)\n    },\n\n    async getContract() {\n      return await Tezos.contract.at(contractAddress)\n    },\n\n    async injectMemo(content: string) {\n      const contract = await Tezos.contract.at(contractAddress)\n      const response = await contract.methods.main(content).send()\n      return await response.confirmation()\n    }\n  }\n}\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { withKeyContext, ComponentProps } from './KeyContext';\n\n\nconst MemoApp: React.FC<ComponentProps> = ({\n  useContract,\n  getContract\n}) => {\n  const contract = useContract()\n\n  const [state, setState] = useState('')\n  const [inTransaction, setInTransaction] = useState(false)\n\n  const onMemoInject = async (state: string) => {\n    try {\n      setInTransaction(true)\n      const ctx = await getContract()\n      const injected = await ctx.methods.main(state).send()\n      await injected.confirmation()\n      setState('')\n      setInTransaction(false)\n    } catch (e) {\n      alert(e.message)\n      setInTransaction(true)\n    }\n  }\n\n\n  return (\n    <div className=\"app\">\n      <header>\n        Decentralized Memo<br/>\n      </header>\n\n      <main>\n        <Memo content={contract?.string}/>\n      </main>\n\n      <footer>\n        <label>\n          <span>Content</span>\n          <textarea\n            placeholder=\"Write your memo here\"\n            value={state}\n            disabled={inTransaction}\n            onChange={ev => setState(ev.currentTarget.value) }\n          />\n        </label>\n\n        <button\n          disabled={inTransaction}\n          onClick={() => onMemoInject(state)}\n        >\n          {inTransaction ? 'Waiting for block confirmation...' : 'Write Memo'}\n        </button>\n      </footer>\n    </div>\n\n  );\n}\n\ninterface Memo {\n  content: string\n}\nconst Memo: React.FC<Memo> = ({\n  content\n}) => {\n\n  return (\n    <div className=\"memo\">\n      <header>\n        Memo says...\n      </header>\n\n      <div>\n        {content}\n      </div>\n    </div>\n  )\n}\n\nexport default withKeyContext('KT1DBaG4RWxHw8Sjoj4gwJSeQ4KBZ61TtGvX', MemoApp)\n","import React, { useState } from 'react';\nimport { withKeyContext, ComponentProps } from './KeyContext'\nimport './App.css';\n\ntype VoteContext = [\n  { string: string },\n  { int: string }\n]\n\nconst Voting: React.FC<ComponentProps> = ({\n  useContract,\n  getContract\n}) => {\n  const contract = useContract() \n\n  // votes\n  const storage = contract?.args[0]?.args[0]?.args[0]?.map((item: any) => item.args) as VoteContext[]\n  const isElectionClosed = contract?.args[1]?.prim === 'True'\n  \n  const [state, setState] = useState('')\n  const [inTransaction, setInTransaction] = useState(isElectionClosed)\n\n  // functions\n  const onVote = async (name: string) => {\n    try {\n      setInTransaction(true)\n      const ctx = await getContract()\n      const voted = await ctx.methods.vote(name).send()\n      await voted.confirmation()\n      setInTransaction(false)\n    } catch(e) {\n      alert(e.message)\n      setInTransaction(false)\n    }\n  }\n\n  const onRemoveCandidate = async (name: string) => {\n    try {\n      setInTransaction(true)\n      const ctx = await getContract()\n      const voted = await ctx.methods.remove_candidate(name).send()\n      await voted.confirmation()\n      setInTransaction(false)\n    } catch(e) {\n      alert(e.message)\n      setInTransaction(false)\n    }\n\n  }\n\n  const onCloseElection = async () => {\n    try {\n      setInTransaction(true)\n      const ctx = await getContract()\n      const voted = await ctx.methods.close_election().send()\n      await voted.confirmation()\n      setInTransaction(false) \n    } catch(e) {\n      alert(e.message)\n      setInTransaction(false)\n    }\n  }\n\n  const onAddCandidate = async (name: string) => {\n    try {\n      setInTransaction(true)\n      const ctx = await getContract()\n      const voted = await ctx.methods.add_candidate(name).send()\n      await voted.confirmation()\n      setInTransaction(false)\n    } catch(e) {\n      alert(e.message)\n      setInTransaction(false)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        Decentralized Voting <br/>\n        {isElectionClosed && <h1>Election is Closed!</h1>} <br/>\n        {inTransaction && <p>Waiting for a block confirmation...</p>}\n      </header>\n\n      <main className=\"vote\">\n        {(storage || []).map(item => (\n          <Votee\n            key={item[0].string}\n            name={item[0].string}\n            count={+item[1].int}\n            inTransaction={inTransaction}\n            onVote={onVote}\n            onRemoveCandidate={onRemoveCandidate}\n          />\n        ))}\n      </main>\n\n      <footer>\n        <div>\n          <h4>Add Candidate</h4>\n          <div>\n            <input\n              type=\"text\"\n              value={state}\n              disabled={inTransaction}\n              onChange={ev => setState(ev.currentTarget.value)}\n            />\n            <button\n              onClick={() => onAddCandidate(state)}\n              disabled={inTransaction}\n            >\n              Add candidate {state}\n            </button>\n          </div>\n        </div>\n\n        <div>\n          <h4>Close Election</h4>\n          <button\n            disabled={inTransaction}\n            onClick={() => {\n              if(window.confirm('Close this election? This action is irreversable.')) {\n                onCloseElection()\n              }\n            }}\n          >\n            Close Election\n          </button>\n        </div>\n      </footer>\n    </div>\n\n  );\n}\n\ninterface Votee {\n  name: string,\n  count: number,\n  inTransaction: boolean,\n  onVote: (name: string) => void,\n  onRemoveCandidate: (name: string) => void,\n}\nconst Votee: React.FC<Votee> = ({\n  name,\n  count,\n  inTransaction,\n  onVote,\n  onRemoveCandidate\n}) => {\n  return (\n    <div className=\"votee\">\n      <h4>{name}</h4>\n      <p>{count}</p>\n\n      <footer>\n        <button\n          disabled={inTransaction}\n          onClick={() => onVote(name)}\n        >Vote for this candidate</button>\n        <button\n          disabled={inTransaction}\n          onClick={() => onRemoveCandidate(name)}\n        >\n          Remove this candidate\n        </button>\n      </footer>\n    </div>\n  )\n}\n\nexport default withKeyContext('KT1L6hJeetJVbxzMxtH2CjK7onB34H2tCG6z', Voting)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Voting from './Voting'\nimport * as serviceWorker from './serviceWorker';\n\nconst Router = () => {\n  const pathname = window.location.pathname\n\n  return pathname === '/memo'\n    ? <App/>\n    : <Voting/>\n}\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}